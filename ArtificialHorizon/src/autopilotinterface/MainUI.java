/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package autopilotinterface;

import com.fazecast.jSerialComm.SerialPort;//important import - this allows the program to read in data from the arduino
import java.awt.Color;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerListModel;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.io.File;
import java.util.Scanner;
import javax.swing.JPanel;

/**
 *
 * @author Oliver
 */
public class MainUI extends javax.swing.JFrame {

    //constants to set the size of the AH display
    final int HORIZON_WIDTH = 240;
    final int HORIZON_HEIGHT = 300;

    //important that the comminication is really fast - 9600B wont work for sure
    int baudRate;//This may be why it does not work for you!

    SerialPort chosenPort;//must be accessible throughout the program 

    boolean connected = false;//must be global so it is remebered            

    /**
     * Creates new form MainUI
     */
    public MainUI() {
        initComponents();
        this.setLocationRelativeTo(null);//so it appears in the middle of my screen
        this.setResizable(false);//less likely to cause problems 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        telementryPnl = new javax.swing.JPanel();
        portsSpn = new javax.swing.JSpinner();
        connectBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        portErrLbl = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        baudRateErrLbl = new javax.swing.JLabel();
        typeErrLbl = new javax.swing.JLabel();
        baudRateCmb = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        telementryPnl.setBackground(new java.awt.Color(204, 204, 204));
        telementryPnl.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout telementryPnlLayout = new javax.swing.GroupLayout(telementryPnl);
        telementryPnl.setLayout(telementryPnlLayout);
        telementryPnlLayout.setHorizontalGroup(
            telementryPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        telementryPnlLayout.setVerticalGroup(
            telementryPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 386, Short.MAX_VALUE)
        );

        portsSpn.setModel(new javax.swing.SpinnerListModel(new String[] {"Item 0", "Item 1", "Item 2", "Item 3"}));
        portsSpn.setToolTipText("Select COM port");

        connectBtn.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        connectBtn.setText("Connect");
        connectBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectBtnActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Make sure:");

        portErrLbl.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        portErrLbl.setForeground(java.awt.Color.red);
        portErrLbl.setText("You connect to the right port");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel3.setText("Angles are coming through in the form 'roll, pitch'");

        baudRateErrLbl.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        baudRateErrLbl.setText("The baud rates match");

        typeErrLbl.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        typeErrLbl.setText("Angles are Integers");

        baudRateCmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "115200", "57600" }));
        baudRateCmb.setToolTipText("Select Baud Rate");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(telementryPnl, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(typeErrLbl)
                            .addComponent(jLabel1)
                            .addComponent(portErrLbl)
                            .addComponent(jLabel3)
                            .addComponent(baudRateErrLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(portsSpn, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(baudRateCmb, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(connectBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(telementryPnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(portsSpn, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(baudRateCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(connectBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(portErrLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(typeErrLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(baudRateErrLbl)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * uses the boolean 'connected' to either try to connect to the port shown
     * on the spinner or disconnect and reset everything so that the user can
     * choose a different
     *
     * @param evt
     */
    private void connectBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectBtnActionPerformed
        int answer;//holds the answer given by the user when asked to confirm they want to disconnect 

        if (connected == false) {//if not connected with a particular port

            chosenPort = SerialPort.getCommPort(portsSpn.getValue().toString());//find the port shown on the spinner 
            baudRate = Integer.parseInt(baudRateCmb.getItemAt(baudRateCmb.getSelectedIndex()));

            if (chosenPort.openPort()) {
                JOptionPane.showMessageDialog(null, "Connected");//notify user of successful connection
                chosenPort.setComPortTimeouts(SerialPort.TIMEOUT_SCANNER, 0, 0);//set the connection mode
                chosenPort.setBaudRate(baudRate);

                //flips
                connected = true;
                connectBtn.setText("Diconnect");
                connectBtn.setBackground(Color.gray);
                portErrLbl.setForeground(Color.black);
                portsSpn.setEnabled(false);

                displayData();//go into the main loop 

            } else {//if it does not connect 
                JOptionPane.showMessageDialog(null, "Failed to connect");
                populateSpinner();//it may be that the situation has changed (eg something may have been unplugged)
            }

        } else {//if the user is connected to a particular port 
            answer = JOptionPane.showConfirmDialog(null, "Do you want to disconnect?", null, JOptionPane.YES_NO_OPTION);//confirm intentions 

            if (answer == JOptionPane.YES_OPTION) {
                chosenPort.closePort();
                //flips 
                connected = false;
                portsSpn.setEnabled(true);
                populateSpinner();
                connectBtn.setText("connect");
                connectBtn.setBackground(Color.orange);//show the user that action is requiered
                portErrLbl.setForeground(Color.red);//prompt the user to connect again 
            }
        }
    }//GEN-LAST:event_connectBtnActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        artificialHorizon(0, 0, telementryPnl);
        populateSpinner();
    }//GEN-LAST:event_formWindowOpened

    /**
     * Adds all the available com port names to the portsSpn If none are
     * available, the user is notified - - and asked if they want to again (they
     * may have forgotten to plug something in)
     */
    public void populateSpinner() {
        int answer;//used to hold the answer to the JOption pane that comes up if no ports are found

        portsSpn.setEditor(new JSpinner.ListEditor(portsSpn));//so it can be editted 

        SerialPort[] ports = SerialPort.getCommPorts();

        if (ports.length != 0) {//if there are ports available
            String[] portNames = new String[ports.length];

            for (int i = 0; i < ports.length; i++) {
                portNames[i] = ports[i].getSystemPortName();
            }

            portsSpn.setModel(new SpinnerListModel(portNames));
        } else {//if no ports are found 
            answer = JOptionPane.showConfirmDialog(null, "Try again?", "Could not find any active ports", JOptionPane.YES_NO_OPTION);
            if (answer == JOptionPane.YES_OPTION) {
                populateSpinner();//try again if the user clicks yes 
            }
        }

        connectBtn.setBackground(Color.orange);//show the user that action is required 
        portsSpn.setEditor(new JSpinner.DefaultEditor(portsSpn));//stops the user being able to change it 
    }

    public void artificialHorizon(int roll, int pitch, JPanel panel) {
        Graphics g = panel.getGraphics();

        //get the AH to display in the middle of the panel
        int cornerX = panel.getWidth() / 2 - HORIZON_WIDTH / 2;
        int cornerY = panel.getHeight() / 2 - HORIZON_HEIGHT / 2;

        //work out the y co-ordinates
        int horizonOneY = cornerY + HORIZON_HEIGHT / 2 + pitch * 2 - roll * 2;
        int horizonTwoY = cornerY + HORIZON_HEIGHT / 2 + pitch * 2 + roll * 2;

        //limit the values so everything stays in the box
        if (horizonOneY < cornerY) {
            horizonOneY = cornerY;
        }
        if (horizonTwoY < cornerY) {
            horizonTwoY = cornerY;
        }
        if (horizonOneY > cornerY + HORIZON_HEIGHT) {
            horizonOneY = HORIZON_HEIGHT + cornerY;
        }
        if (horizonTwoY > cornerY + HORIZON_HEIGHT) {
            horizonTwoY = HORIZON_HEIGHT + cornerY;
        }

        //set the co-ordinates for blue part and the orange part
        int skyX[] = {cornerX, cornerX, cornerX + HORIZON_WIDTH, cornerX + HORIZON_WIDTH};
        int earthX[] = {cornerX, cornerX, cornerX + HORIZON_WIDTH, cornerX + HORIZON_WIDTH};
        int skyY[] = {cornerY, horizonOneY, horizonTwoY, cornerY};
        int earthY[] = {horizonOneY, cornerY + HORIZON_HEIGHT, cornerY + HORIZON_HEIGHT, horizonTwoY};

        //set the co-ordinates for the simple aircraft graphic that stays in the center
        int lineX[] = {cornerX + 20, cornerX + HORIZON_WIDTH / 2 - 40, cornerX + HORIZON_WIDTH / 2, cornerX + HORIZON_WIDTH / 2 + 40, cornerX + HORIZON_WIDTH - 20};
        int lineY[] = {cornerY + HORIZON_HEIGHT / 2, cornerY + HORIZON_HEIGHT / 2, cornerY + HORIZON_HEIGHT / 2 + 40, cornerY + HORIZON_HEIGHT / 2, cornerY + HORIZON_HEIGHT / 2};

        //draw the outline box
        g.setColor(Color.black);
        g.drawRect(cornerX - 1, cornerY - 1, HORIZON_WIDTH + 1, HORIZON_HEIGHT + 1);

        //draw the shape representing the sky
        g.setColor(Color.cyan);
        g.fillPolygon(skyX, skyY, 4);

        //draw the shape representing the earth
        g.setColor(Color.ORANGE);
        g.fillPolygon(earthX, earthY, 4);

        //draw the simple aircraft graphic on top
        g.setColor(Color.black);
        g.drawPolyline(lineX, lineY, 5);

    }

    /**
     * Creates and runs a Thread containing a while loop that will keep on
     * reading in new serial data - - and updating the display accordingly
     */
    public void displayData() {

        //System.out.println("displaying data");
        Thread thread = new Thread() {
            @Override
            public void run() {
                
                String[] line;//stores the data just read in
                int answer;//stores the users repsonse to an error
                
                try (Scanner scanner = new Scanner(chosenPort.getInputStream())) {
                    while (scanner.hasNextLine()) {//while data is still coming in 
                        //System.out.println("loop");//sometimes useful to know where we are in the run of the program

                        line = scanner.nextLine().split(",");//read in new line of serial data

                        try {
                            artificialHorizon(Integer.parseInt(line[0]), Integer.parseInt(line[1]), telementryPnl);//update the display
                            typeErrLbl.setForeground(Color.black);//no problems with data coming in 
                        } catch (NumberFormatException e) {
                            //notify the user there is a number format exception
                            typeErrLbl.setForeground(Color.red);

                            //ask the user if they want the program to close the program
                            
                            answer = JOptionPane.showConfirmDialog(null, "Problem - Do you want to exit continue trying?", null, JOptionPane.YES_NO_OPTION);
                            if (answer == JOptionPane.YES_OPTION) {
                                System.exit(0);
                            }
                        }
                    }
                } catch (Exception e) {
                    System.out.println(e);//useful for debugging

                    //ask the user if they want the program to close the program
                    
                    answer = JOptionPane.showConfirmDialog(null, "Try again?", "Problem reading data from serial port", JOptionPane.YES_NO_OPTION);
                    if (answer == JOptionPane.YES_OPTION) {
                        displayData();
                    }

                }
            }
        };
        thread.start();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> baudRateCmb;
    private javax.swing.JLabel baudRateErrLbl;
    private javax.swing.JButton connectBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel portErrLbl;
    private javax.swing.JSpinner portsSpn;
    private javax.swing.JPanel telementryPnl;
    private javax.swing.JLabel typeErrLbl;
    // End of variables declaration//GEN-END:variables
}
